[{"path":"index.html","id":"general-information","chapter":"1 General information","heading":"1 General information","text":"","code":"\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)"},{"path":"index.html","id":"instructors","chapter":"1 General information","heading":"1.1 Instructors","text":"Lectures: Þórarinn Jónmundsson (thj73@hi.)Workshops:Supervision: Thor Aspelund (thor@hi.)","code":""},{"path":"index.html","id":"about-me","chapter":"1 General information","heading":"1.2 About me","text":"","code":""},{"path":"index.html","id":"education","chapter":"1 General information","heading":"1.2.1 Education","text":"B.Sc. economics [2017]; B.Sc. applied mathematics [2020]M.Sc. mathematical statistics [2020]Ph.D. biostatistics [current]Research project: Identifying causal candidate proteins cardiometabolic disease","code":""},{"path":"index.html","id":"previous-teaching-experience","chapter":"1 General information","heading":"1.2.2 Previous teaching experience","text":"Teacher assistant:\nIntroduction probability statistics (STÆ203G)\nLinear algebra (STÆ107G)\nBayesian data analysis (STÆ529M)\nApplied linear statistical models (STÆ312M)\nR beginners (MAS103M)\nStatistical consulting (MAS201M)\nIntroduction probability statistics (STÆ203G)Linear algebra (STÆ107G)Bayesian data analysis (STÆ529M)Applied linear statistical models (STÆ312M)R beginners (MAS103M)Statistical consulting (MAS201M)Lecturer\nApplied linear statistical models (STÆ312M)\nApplied linear statistical models (STÆ312M)","code":""},{"path":"index.html","id":"contact-information","chapter":"1 General information","heading":"1.2.3 Contact information","text":"Email: thj73@hi.isOffice: Læknagarður (Lg-306)Mobile: 698-2126","code":""},{"path":"index.html","id":"course-description","chapter":"1 General information","heading":"1.3 Course description","text":"Compulsory course. aim course provide post graduate students practical generic skills required research. Items covered course descriptive statistics, effect statistics, validity reliability, inferential statistics, common parametric nonparametric statistical tests multiple regression analysis. students introduced computer statistical analysis practical computer classes.","code":""},{"path":"index.html","id":"learning-outcomes","chapter":"1 General information","heading":"1.4 Learning outcomes","text":"students:Understand basic concepts statistics data analysis.Can apply basic statistical methods data analysed thesis.Can understand criticize statistical analysis data health research.literate R.Understand theory behind various statistical calculations, able apply knowledge analysis data.","code":""},{"path":"index.html","id":"textbooks","chapter":"1 General information","heading":"1.5 Textbooks","text":"lecture notes based following texts:Textbooks English:\nModern Dive (MD)\nR Data Science (R4DS)\nStatistical Thinking 21st Century (ST21)\nModern Dive (MD)R Data Science (R4DS)Statistical Thinking 21st Century (ST21)Textbooks Icelandic:\nTölfræði frá grunni (TG)\nR frá grunni (RG)\nTölfræði frá grunni (TG)R frá grunni (RG)sufficient read lecture notes interested can read books pace.","code":""},{"path":"index.html","id":"software","chapter":"1 General information","heading":"1.6 Software","text":"RRStudio","code":""},{"path":"index.html","id":"lectures-and-workshops","chapter":"1 General information","heading":"1.7 Lectures and workshops","text":"Lectures 9:10-11:30 workshops 12:30 14:00. lectures recorded streamed.. Lecture workshop attendance mandatory. Student’s strongly encouraged utilize workshops!.can see rough plan course. Depending course goes may subject change. Lectures marked open might used extra lecture workshop slots.","code":""},{"path":"index.html","id":"tentative-lecture-schedule","chapter":"1 General information","heading":"1.7.1 Tentative lecture schedule","text":"","code":""},{"path":"index.html","id":"workshop-schedule","chapter":"1 General information","heading":"1.7.2 Workshop schedule","text":"","code":""},{"path":"index.html","id":"grading","chapter":"1 General information","heading":"1.8 Grading","text":"final grade class based following partition:Four assignments R, worth 10% final grade.Two longer assignments, worth 10% final grade.final exam worth 40% final grade.must get score 5/10 higher final exam finish course.","code":""},{"path":"index.html","id":"assignments","chapter":"1 General information","heading":"1.9 Assignments","text":"schedule assignments. encouraged form groups 2-4 people solve assignments. choose , please hand one solution per group.","code":""},{"path":"index.html","id":"final-exam","chapter":"1 General information","heading":"1.10 Final exam","text":"final exam take-home exam handed March 1st.","code":""},{"path":"index.html","id":"final-exam-eligibility","chapter":"1 General information","heading":"1.10.1 Final exam eligibility","text":"need hand four R assignments home assignments eligible take final exam.","code":""},{"path":"lecture-1.html","id":"lecture-1","chapter":"2 Lecture 1","heading":"2 Lecture 1","text":"","code":""},{"path":"lecture-1.html","id":"installing-r-and-rstudio","chapter":"2 Lecture 1","heading":"2.1 Installing R and RStudio","text":"install RStudio, need install R. Please visit link download R operating system. Afterwards, can download RStudio .Alternatively, can create account RStudio Cloud cloud-based version RStudio.","code":""},{"path":"lecture-1.html","id":"what-is-the-difference-between-r-and-rstudio","chapter":"2 Lecture 1","heading":"2.2 What is the difference between R and RStudio?","text":"R programming language specifically designed statistics RStudio Integrated Development Environment (IDE). RStudio combines multiple tool single graphical user interface (GUI) ease development R programs. Examples tools source-code environment, file navigation, plot viewer.exist alternatives RStudio. personally use Nvim-R like many others started R journey RStudio.","code":""},{"path":"lecture-1.html","id":"what-is-the-difference-between-.r-and-.rmd-files","chapter":"2 Lecture 1","heading":"2.3 What is the difference between .R and .Rmd files?","text":"file .R extension script file R. script file contains code written. .R file “stupid” sense follow instructions letter. tell computer run R scrip opening command prompt/terminal, navigating root folder, writing Rscript yourScript.R.file .Rmd extension markdown file. allows combine code text write detailed reports. example .Rmd file lecture.","code":""},{"path":"lecture-1.html","id":"hello-world","chapter":"2 Lecture 1","heading":"2.4 Hello world","text":"simple piece R code inside .Rmd document:anatomy code follows:# embedded. # symbol tells R ignore whatever comes # particular line. useful allows us comment code. Comments allow explain code . Writing informative, concise comments extremely important. good chance either share code collaborator revisit later time. cases, comments can quickly bring reader speed.# embedded. # symbol tells R ignore whatever comes # particular line. useful allows us comment code. Comments allow explain code . Writing informative, concise comments extremely important. good chance either share code collaborator revisit later time. cases, comments can quickly bring reader speed.print('Hello world'). line composed two things: print() function string 'Hello world'. function like recipe; inputs outputs. recipe print() take input display command line. many predefined functions R can also create . string data type R. quotes tell R whatever considered string. remove quotes, R whine. can also tell R something string double quotes. Pick whichever prefer.print('Hello world'). line composed two things: print() function string 'Hello world'. function like recipe; inputs outputs. recipe print() take input display command line. many predefined functions R can also create . string data type R. quotes tell R whatever considered string. remove quotes, R whine. can also tell R something string double quotes. Pick whichever prefer.","code":"\n# Example of embedded code\nprint('Hello world')\n#> [1] \"Hello world\"\n# Function printMyString\n# Input: A string.\n# Output: The input string is printed out in the command line.\nprintMyString <- function(someString) {\n    print(someString)\n}\n# Test case\nprintMyString(\"This is a custom function I made. It's pretty useless.\")\n#> [1] \"This is a custom function I made. It's pretty useless.\""},{"path":"lecture-1.html","id":"other-basic-objects","chapter":"2 Lecture 1","heading":"2.5 Other basic objects","text":"R many objects besides strings integers, doubles (reals), vectors, factors, logical, data frames.integer whole number. Examples integers 1, -2, 1000, 94.integer whole number. Examples integers 1, -2, 1000, 94.double real number. Examples real numbers 1, -2, 3.14, sin(0.5).double real number. Examples real numbers 1, -2, 3.14, sin(0.5).vector collection values. define vector c() function. example c(1, -2, 3.14, sin(0.5)) vector doubles c('', 'ab', 'bla bla') vector strings. Note elements vector data type. discrepency, R try coerce elements data type.vector collection values. define vector c() function. example c(1, -2, 3.14, sin(0.5)) vector doubles c('', 'ab', 'bla bla') vector strings. Note elements vector data type. discrepency, R try coerce elements data type.factor way store categorical values. example, imagine conducted study patients. One pieces information store smoking status patients. Patients can current smokers, previous smokers, never smokers. levels factor never, previous, current. discuss factor variables later.factor way store categorical values. example, imagine conducted study patients. One pieces information store smoking status patients. Patients can current smokers, previous smokers, never smokers. levels factor never, previous, current. discuss factor variables later.logical value either TRUE FALSE. Logical values can also encoded 1 0 TRUE FALSE respectively.logical value either TRUE FALSE. Logical values can also encoded 1 0 TRUE FALSE respectively.data frame collection vectors. can think data frame Excel spreadsheet columns rows. data frames later.data frame collection vectors. can think data frame Excel spreadsheet columns rows. data frames later.Note exhaustive list.","code":""},{"path":"lecture-1.html","id":"storing-objects-in-memory","chapter":"2 Lecture 1","heading":"2.6 Storing objects in memory","text":"can store objects memory <- operator. Whatever right <- object want store memory whatever left <- name object. quick example:vector c(1, 2, 3) exists now memory named variable x rather typing c(1, 2, 3) whenever want work vector, can simply use x instead. example, imagine wanted add 1 vector c(1, 2, 3); since stored c(1, 2, 3) object x R, can simply write:careful! reuse variable names pre-existing object overwrriten new object.","code":"\nx <- c(1, 2, 3)\nx\n#> [1] 1 2 3\nx + 1\n#> [1] 2 3 4\nx <- 'x is no longer a vector of numbers; it is a string'\nx\n#> [1] \"x is no longer a vector of numbers; it is a string\""},{"path":"lecture-1.html","id":"packages","chapter":"2 Lecture 1","heading":"2.7 Packages","text":"R many built-functions data types sometimes need . Luckily, good chance someone R community already solved problem made work publicly available R package. R package thus simply collection functions data types (sometimes even data) can load R use.can download install package install.packages() function. load package use library() function. enough install package must load every time open RStudio (intend use ).","code":"\n# This can be run once\ninstall.packages('ggplot2')\n# This is something you have to run every time \n# you restart R\nlibrary('ggplot2')"},{"path":"lecture-1.html","id":"the-mtcars-data","chapter":"2 Lecture 1","heading":"2.8 The mtcars data","text":"’s time start working data. Included R mtcars data frame:Note entire data set printed. annoying avoided. Functions like as_tibble() included tibble library converts data frame tibble, much nicer data type work (opinion). begin installing loading tibble library:use mtcars data frame input as_tibble() function.things worth mentioning :data truncated. see first ten rows however many columns fit page.data truncated. see first ten rows however many columns fit page.get information total number rows columns tibble.get information total number rows columns tibble.get data type column. Note dbl underneath column name.get data type column. Note dbl underneath column name.Since prefer using tibble format, going overwrite data frame mtcars tibble version [recall discussion ]:can refer specific variables tibbles (data frames) $ operator:Sometimes want access number rows /columns data. can use nrow() ncol() functions respectively. Alternatively, can use dim() function get simulatenously.","code":"\nmtcars\n#>                      mpg cyl  disp  hp drat    wt  qsec vs\n#> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0\n#> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0\n#> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1\n#> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1\n#> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0\n#> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1\n#> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0\n#> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1\n#> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1\n#> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1\n#> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1\n#> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0\n#> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0\n#> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0\n#> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0\n#> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0\n#> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0\n#> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1\n#> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1\n#> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1\n#> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1\n#> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0\n#> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0\n#> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0\n#> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0\n#> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1\n#> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0\n#> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1\n#> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0\n#> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0\n#> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0\n#> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1\n#>                     am gear carb\n#> Mazda RX4            1    4    4\n#> Mazda RX4 Wag        1    4    4\n#> Datsun 710           1    4    1\n#> Hornet 4 Drive       0    3    1\n#> Hornet Sportabout    0    3    2\n#> Valiant              0    3    1\n#> Duster 360           0    3    4\n#> Merc 240D            0    4    2\n#> Merc 230             0    4    2\n#> Merc 280             0    4    4\n#> Merc 280C            0    4    4\n#> Merc 450SE           0    3    3\n#> Merc 450SL           0    3    3\n#> Merc 450SLC          0    3    3\n#> Cadillac Fleetwood   0    3    4\n#> Lincoln Continental  0    3    4\n#> Chrysler Imperial    0    3    4\n#> Fiat 128             1    4    1\n#> Honda Civic          1    4    2\n#> Toyota Corolla       1    4    1\n#> Toyota Corona        0    3    1\n#> Dodge Challenger     0    3    2\n#> AMC Javelin          0    3    2\n#> Camaro Z28           0    3    4\n#> Pontiac Firebird     0    3    2\n#> Fiat X1-9            1    4    1\n#> Porsche 914-2        1    5    2\n#> Lotus Europa         1    5    2\n#> Ford Pantera L       1    5    4\n#> Ferrari Dino         1    5    6\n#> Maserati Bora        1    5    8\n#> Volvo 142E           1    4    2\n# Install tibble package\ninstall.packages('tibble')\n# Load tibble package\nlibrary(tibble)\nas_tibble(mtcars)\n#> # A tibble: 32 × 11\n#>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n#>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1  21       6  160    110  3.9   2.62  16.5     0     1\n#>  2  21       6  160    110  3.9   2.88  17.0     0     1\n#>  3  22.8     4  108     93  3.85  2.32  18.6     1     1\n#>  4  21.4     6  258    110  3.08  3.22  19.4     1     0\n#>  5  18.7     8  360    175  3.15  3.44  17.0     0     0\n#>  6  18.1     6  225    105  2.76  3.46  20.2     1     0\n#>  7  14.3     8  360    245  3.21  3.57  15.8     0     0\n#>  8  24.4     4  147.    62  3.69  3.19  20       1     0\n#>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0\n#> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0\n#> # … with 22 more rows, and 2 more variables: gear <dbl>,\n#> #   carb <dbl>\nmtcars <- as_tibble(mtcars)\nmtcars$mpg\n#>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8\n#> [12] 16.4 17.3 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5\n#> [23] 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 15.0 21.4\nnrow(mtcars)\n#> [1] 32\nncol(mtcars)\n#> [1] 11\ndim(mtcars)\n#> [1] 32 11"},{"path":"lecture-1.html","id":"summarizing-data-frames","chapter":"2 Lecture 1","heading":"2.9 Summarizing data frames","text":"can quickly summarize data summary() function:nice way get quick feel data.","code":"\nsummary(mtcars)\n#>       mpg             cyl             disp      \n#>  Min.   :10.40   Min.   :4.000   Min.   : 71.1  \n#>  1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8  \n#>  Median :19.20   Median :6.000   Median :196.3  \n#>  Mean   :20.09   Mean   :6.188   Mean   :230.7  \n#>  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0  \n#>  Max.   :33.90   Max.   :8.000   Max.   :472.0  \n#>        hp             drat             wt       \n#>  Min.   : 52.0   Min.   :2.760   Min.   :1.513  \n#>  1st Qu.: 96.5   1st Qu.:3.080   1st Qu.:2.581  \n#>  Median :123.0   Median :3.695   Median :3.325  \n#>  Mean   :146.7   Mean   :3.597   Mean   :3.217  \n#>  3rd Qu.:180.0   3rd Qu.:3.920   3rd Qu.:3.610  \n#>  Max.   :335.0   Max.   :4.930   Max.   :5.424  \n#>       qsec             vs               am        \n#>  Min.   :14.50   Min.   :0.0000   Min.   :0.0000  \n#>  1st Qu.:16.89   1st Qu.:0.0000   1st Qu.:0.0000  \n#>  Median :17.71   Median :0.0000   Median :0.0000  \n#>  Mean   :17.85   Mean   :0.4375   Mean   :0.4062  \n#>  3rd Qu.:18.90   3rd Qu.:1.0000   3rd Qu.:1.0000  \n#>  Max.   :22.90   Max.   :1.0000   Max.   :1.0000  \n#>       gear            carb      \n#>  Min.   :3.000   Min.   :1.000  \n#>  1st Qu.:3.000   1st Qu.:2.000  \n#>  Median :4.000   Median :2.000  \n#>  Mean   :3.688   Mean   :2.812  \n#>  3rd Qu.:4.000   3rd Qu.:4.000  \n#>  Max.   :5.000   Max.   :8.000"},{"path":"lecture-1.html","id":"subsetting-our-data","chapter":"2 Lecture 1","heading":"2.10 Subsetting our data","text":"Let us assume interested specific subset mtcars data. can create subset mtcars columns interested using select() function dplyr package. tibble package, install load dplyr package, something hope grown comfortable point:now create subset tibble mtcars data consist rows variables mpg, hp, wt, representing miles per gallon, gross horsepower, weight (1000 lbs) respectively.Dissecting select() function, see first supply function data set want subset (case mtcars) list selected variables. can also use select() function throw variables - prefix.","code":"\n# Install dplyr\ninstall.packages('dplyr')\n# Load dplyr package\nlibrary(dplyr)\nsmallData <- select(mtcars, mpg, hp, wt)\nsmallData\n#> # A tibble: 32 × 3\n#>      mpg    hp    wt\n#>    <dbl> <dbl> <dbl>\n#>  1  21     110  2.62\n#>  2  21     110  2.88\n#>  3  22.8    93  2.32\n#>  4  21.4   110  3.22\n#>  5  18.7   175  3.44\n#>  6  18.1   105  3.46\n#>  7  14.3   245  3.57\n#>  8  24.4    62  3.19\n#>  9  22.8    95  3.15\n#> 10  19.2   123  3.44\n#> # … with 22 more rows\nthrowOutVariables <- select(mtcars, -mpg, -hp, -wt)\nthrowOutVariables\n#> # A tibble: 32 × 8\n#>      cyl  disp  drat  qsec    vs    am  gear  carb\n#>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1     6  160   3.9   16.5     0     1     4     4\n#>  2     6  160   3.9   17.0     0     1     4     4\n#>  3     4  108   3.85  18.6     1     1     4     1\n#>  4     6  258   3.08  19.4     1     0     3     1\n#>  5     8  360   3.15  17.0     0     0     3     2\n#>  6     6  225   2.76  20.2     1     0     3     1\n#>  7     8  360   3.21  15.8     0     0     3     4\n#>  8     4  147.  3.69  20       1     0     4     2\n#>  9     4  141.  3.92  22.9     1     0     4     2\n#> 10     6  168.  3.92  18.3     1     0     4     4\n#> # … with 22 more rows"},{"path":"lecture-1.html","id":"creating-new-variables","chapter":"2 Lecture 1","heading":"2.11 Creating new variables","text":"two ways making new variables: $ operator mutate() function dplyr package. Let’s create two new variables randomly drawing numbers interval [0, 1].Note overwrite smallData used mutate() function.","code":"\nsmallData$var1 <- runif(n = nrow(smallData))\nsmallData <- mutate(smallData, var2 = runif(n = nrow(smallData)))\nsmallData\n#> # A tibble: 32 × 5\n#>      mpg    hp    wt   var1    var2\n#>    <dbl> <dbl> <dbl>  <dbl>   <dbl>\n#>  1  21     110  2.62 0.474  0.538  \n#>  2  21     110  2.88 0.447  0.00519\n#>  3  22.8    93  2.32 0.625  0.813  \n#>  4  21.4   110  3.22 0.655  0.818  \n#>  5  18.7   175  3.44 0.469  0.808  \n#>  6  18.1   105  3.46 0.479  0.669  \n#>  7  14.3   245  3.57 0.0277 0.470  \n#>  8  24.4    62  3.19 0.996  0.440  \n#>  9  22.8    95  3.15 0.718  0.183  \n#> 10  19.2   123  3.44 0.0305 0.436  \n#> # … with 22 more rows"},{"path":"lecture-1.html","id":"plotting-our-data","chapter":"2 Lecture 1","heading":"2.12 Plotting our data","text":"create plots use ggplot2 package installed earlier. cover plots detail later now example create scatter plot using ggplot() geom_point() functions.","code":"\nggplot(data = smallData, aes(x = var1, y = var2)) + \n    geom_point()"},{"path":"lecture-1.html","id":"chaining-multiple-functions-together","chapter":"2 Lecture 1","heading":"2.13 Chaining multiple functions together","text":"far used select(), mutate(), ggplot() seperately can actually chain together pipe operator %>% package margrittr. use pipe became ubiquitous got added R built-operator version 4.1. “base” R pipe |>.Let’s recreate plot previous section pipes.","code":"\ninstall.packages('margrittr')\nlibrary(margrittr)\nmtcars %>%\n    mutate(var1 = runif(nrow(mtcars)), \n           var2 = runif(nrow(mtcars))) %>% \n    select(var1, var2) %>%  # this step is unnecessary\n    ggplot(aes(x = var1, y = var2)) + \n        geom_point()"},{"path":"lecture-1.html","id":"the-tidyverse-package","chapter":"2 Lecture 1","heading":"2.14 The tidyverse package","text":"course lecture installed loaded ggplot2, tibble, dplyr, margrittr. packages () belong tidyverse collection. loading tidyverse load ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats. can read package : https://www.tidyverse.org/packages/install load tidyverse simply run:","code":"\ninstall.packages('tidyverse')\nlibrary(tidyverse)"}]
